service: Webchat-api

custom:
  userTable: WebchatUserTable-${self:provider.stage}
  messageTable: WebchatMessageTable-${self:provider.stage}
  roomIndex: RoomIdIndex

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  environment:
    USER_TABLE: ${self:custom.userTable}
    MESSAGE_TABLE: ${self:custom.messageTable}
    ROOM_INDEX: ${self:custom.roomIndex}
  websocketsApiName: Webchat-api
  websocketsApiRouteSelectionExpression: $request.body.action
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
      Resource:
        - !GetAtt userTable.Arn
        - !GetAtt messageTable.Arn
        - !Join
          - "/"
          - - !GetAtt userTable.Arn
            - "index/RoomIdIndex"

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline

functions:
  connectHandler:
    handler: handler.connectHandler
    events:
      - websocket: $connect

  disconnectHandler:
    handler: handler.disconnectHandler
    events:
      - websocket: $disconnect

  defaultHandler:
    handler: handler.defaultHandler
    events:
      - websocket: $default

  messageHandler:
    handler: handler.messageHandler
    events:
      - websocket:
          route: message

resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.userTable}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: roomId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.roomIndex}
            KeySchema:
              - AttributeName: roomId
                KeyType: HASH
              - AttributeName: connectionId
                KeyType: RANGE
            Projection:
              ProjectionType: "KEYS_ONLY"
        BillingMode: PAY_PER_REQUEST

    messageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.messageTable}
        AttributeDefinitions:
          - AttributeName: roomId
            AttributeType: S
          - AttributeName: dateTime
            AttributeType: S
        KeySchema:
          - AttributeName: roomId
            KeyType: HASH
          - AttributeName: dateTime
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
